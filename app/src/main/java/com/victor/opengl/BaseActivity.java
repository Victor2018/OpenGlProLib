package com.victor.opengl;import android.Manifest;import android.app.AlertDialog;import android.content.Context;import android.content.DialogInterface;import android.content.Intent;import android.opengl.GLSurfaceView;import android.os.Bundle;import android.os.Message;import android.support.annotation.NonNull;import android.support.v7.app.AppCompatActivity;import com.victor.http.util.MainHandler;import com.victor.opengl.util.AppUtil;import com.victor.opengl.util.StatusBarUtil;import com.victor.update.library.model.DataObservable;import java.util.Observable;import java.util.Observer;import butterknife.ButterKnife;import permission.victor.com.library.OnPermissionCallback;import permission.victor.com.library.PermissionHelper;/* * ----------------------------------------------------------------- * Copyright (C) 2018-2028, by Victor, All rights reserved. * ----------------------------------------------------------------- * File: ContentViewHolder.java * Author: Victor * Date: 2018/12/24 15:55 * Description: Activity 基类 * ----------------------------------------------------------------- */public abstract class BaseActivity extends AppCompatActivity implements Observer,        OnPermissionCallback,MainHandler.OnMainHandlerImpl {    protected String TAG = getName();    private PermissionHelper permissionHelper;    private String[] neededPermission;    public final static String[] MULTI_PERMISSIONS = new String[]{            Manifest.permission.CAMERA,            Manifest.permission.VIBRATE,            Manifest.permission.READ_EXTERNAL_STORAGE,            Manifest.permission.READ_PHONE_STATE,            Manifest.permission.MOUNT_UNMOUNT_FILESYSTEMS,            Manifest.permission.GET_TASKS,            Manifest.permission.RECEIVE_BOOT_COMPLETED    };    private AlertDialog builder;    protected GLSurfaceView mGLSurfaceView;    protected GLSurfaceView.Renderer mRenderer;    protected abstract GLSurfaceView.Renderer bindRenderer();    protected String getName() {        return getClass().getSimpleName();    }    public static void intentStart(Context ctx, Class cls) {        if (ctx == null)            return;        Intent intent = new Intent(ctx, cls);        AppUtil.launchApp(ctx, intent);    }    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        initialize();    }    private void initialize () {        MainHandler.get().register(this);        ButterKnife.bind(this);        DataObservable.getInstance().addObserver(this);        StatusBarUtil.translucentStatusBar(this,true,false);        //已在values-21中的styles.xml中设置虚拟按键背景为透明则不需要重新计算view留出虚拟按键显示区域//        AndroidBug54971Workaround.assistActivity(findViewById(android.R.id.content));        permissionHelper = PermissionHelper.getInstance(this);        requestPermission(MULTI_PERMISSIONS);        mGLSurfaceView = new GLSurfaceView(this);        //设置版本        mGLSurfaceView.setEGLContextClientVersion(3);        mRenderer = bindRenderer();        mGLSurfaceView.setRenderer(mRenderer);        mGLSurfaceView.setRenderMode(GLSurfaceView.RENDERMODE_WHEN_DIRTY);        setContentView(mGLSurfaceView);    }    @Override    protected void onResume() {        super.onResume();    }    @Override    protected void onPause() {        super.onPause();    }    @Override    protected void onDestroy() {        super.onDestroy();        ButterKnife.unbind(this);        DataObservable.getInstance().deleteObserver(this);        MainHandler.get().unregister(this);    }    @Override    public void update(Observable observable, Object data) {    }    public void requestPermission (String[] permissions) {        permissionHelper                .setForceAccepting(false) // default is false. its here so you know that it exists.                .request(permissions);    }    @Override    public void onPermissionGranted(@NonNull String[] strings) {    }    @Override    public void onPermissionDeclined(@NonNull String[] strings) {    }    @Override    public void onPermissionPreGranted(@NonNull String s) {    }    @Override    public void onPermissionNeedExplanation(@NonNull String s) {        neededPermission = PermissionHelper.declinedPermissions(this, MULTI_PERMISSIONS);        StringBuilder builder = new StringBuilder(neededPermission.length);        if (neededPermission.length > 0) {            for (String permission : neededPermission) {                builder.append(permission).append("\n");            }        }        AlertDialog alert = getAlertDialog(neededPermission, builder.toString());        if (!alert.isShowing()) {            alert.show();        }    }    @Override    public void onPermissionReallyDeclined(@NonNull String s) {    }    @Override    public void onNoPermissionNeeded() {    }    public AlertDialog getAlertDialog(final String[] permissions, final String permissionName) {        if (builder == null) {            builder = new AlertDialog.Builder(this)                    .setTitle("Permission Needs Explanation")                    .create();        }        builder.setButton(DialogInterface.BUTTON_POSITIVE, "Request", new DialogInterface.OnClickListener() {            @Override            public void onClick(DialogInterface dialog, int which) {                permissionHelper.requestAfterExplanation(permissions);            }        });        builder.setMessage("Permissions need explanation (" + permissionName + ")");        return builder;    }    @Override    public void handleMainMessage(Message message) {        switch (message.what) {        }    }    @Override    public void startActivity(Intent intent) {        super.startActivity(intent);//        overridePendingTransition(R.anim.activity_down_in, R.anim.activity_down_out);    }    public void startActivityWithOutAnim(Intent intent) {        super.startActivity(intent);    }    @Override    public void onBackPressed() {        super.onBackPressed();//        overridePendingTransition(R.anim.activity_up_in, R.anim.activity_up_out);    }}